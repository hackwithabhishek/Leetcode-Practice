class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.length();
        bool L[n][n];
        memset(L,0,sizeof(L));
        int max=1;
        for(int i=0;i<n;++i){
            L[i][i]=true;
        }
        int start=0;
        for(int i=0;i<n-1;++i){
            if(s[i]==s[i+1]){
                L[i][i+1]=true;
                start=i;
                max=2;
            }
        }
        
        for(int k=3;k<=n;k++){
            for(int i=0;i<n-k+1;++i){
                int j=i+k-1;
                if(L[i+1][j-1]&&s[i]==s[j]){
                    L[i][j]=true;
                    if(k>max){
                    start=i;
                    max=k;
                }
                }
                
            }
        }
       // return s[start:start+max-1];
        string str;
       // cout<<start<<max;
    for(int i=start;i<=(start+max-1);i++){
        str=str+s[i];
     }
        return str;
    }
    
};
